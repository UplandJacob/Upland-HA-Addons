name: MC Auth Server deps

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write


jobs:
  check_for_updates:
    runs-on: ubuntu-latest
    name: Check for updates
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.HA_GITHUB_TOKEN }}
      - name: Create empty "changed" env variable and check for existimg branch
        run: |
          echo "changed=" >> $GITHUB_ENV;

          REGEX_PATTERN="auth-server-deps-[a-f0-9]{7}"
          BRANCHES=$(git branch -r)
          echo "Branches: $BRANCHES"
          BRANCH_NAME=$(echo "$BRANCHES" | grep -E "$REGEX_PATTERN" | sed 's|origin/||' | head -n 1 | xargs )
          echo "Found branch: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          if [ "$BRANCH_NAME" != "" ]; then
            echo "fetching and checking out..."
            git fetch --all
            git checkout $BRANCH_NAME
            echo "done"
          fi

          echo "VERS_FILE=./mc-auth-server/default_config/plugins.yaml" >> $GITHUB_ENV
          echo "PLs=.packaged_plugins" >> $GITHUB_ENV

      - name: Leaf server
        run: |
          version=$(yq '.server.version' ${{ env.VERS_FILE }})
          echo "Server version: $version"
          resp=$(curl --silent -X 'GET' "https://api.leafmc.one/v2/projects/leaf/versions/$version" -H 'accept: application/json')
          echo "$resp"
          latestBuild=$(echo "$resp" | jq -r .builds.[-1])
          echo "latest build: $latestBuild"

          currentBuild=$(yq '.server.build' ${{ env.VERS_FILE }})
          echo "current build: $currentBuild"

          if [ $latestBuild != $currentBuild ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} Leaf" >> $GITHUB_ENV;
            yq -i ".server.build = $latestBuild" ${{ env.VERS_FILE }}
          fi

      - name: Floodgate
        run: |
          resp=$(curl --silent -X 'GET' "https://download.geysermc.org/v2/projects/floodgate" -H 'accept: application/json')
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .versions.[-1])
          echo "latest version: $latestVers"
          resp2=$(curl --silent -X 'GET' "https://download.geysermc.org/v2/projects/floodgate/versions/$latestVers" -H 'accept: application/json')
          echo "$resp2"
          latestBuild=$(echo "$resp2" | jq -r .builds.[-1])
          echo "latest build: $latestBuild"

          currentVers=$(yq '${{ env.PLs }}.floodgate.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          currentBuild=$(yq '${{ env.PLs }}.floodgate.build' ${{ env.VERS_FILE }})
          echo "current build: $currentBuild"

          if [ "$latestVers" != "$currentVers" -o "$latestBuild" != "$currentBuild" ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} Floodgate" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i "${{ env.PLs }}.floodgate.version = \"$latestVers\" | ${{ env.PLs }}.floodgate.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestBuild != $currentBuild ]; then
            echo "BUILD update"
            yq -i "${{ env.PLs }}.floodgate.build = $latestBuild" ${{ env.VERS_FILE }}
          fi
      
      - name: ViaVersion
        run: |
          latestVers=$(curl --silent -X 'GET' \
            -H "Accept-Language: en" -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4.212 Safari/537.36" \
            "https://hangar.papermc.io/api/v1/projects/ViaVersion/latestrelease")
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.viaversion.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} ViaVersion" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.viaversion.version = \"$latestVers\" | ${{ env.PLs }}.viaversion.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: ViaBackwards
        run: |
          latestVers=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" \
            -H "Accept-Language: en" -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4.212 Safari/537.36" \
            "https://hangar.papermc.io/api/v1/projects/ViaBackwards/latestrelease")
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.viabackwards.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} ViaBackwards" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.viabackwards.version = \"$latestVers\" | ${{ env.PLs }}.viabackwards.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: ViaRewind
        run: |
          latestVers=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" \
            -H "Accept-Language: en" -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4.212 Safari/537.36" \
            "https://hangar.papermc.io/api/v1/projects/ViaRewind/latestrelease")
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.viarewind.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} ViaRewind" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.viarewind.version = \"$latestVers\" | ${{ env.PLs }}.viarewind.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: SkinsRestorer
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' \
            -H "Accept-Language: en" -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4.212 Safari/537.36" \
            "https://api.github.com/repos/SkinsRestorer/SkinsRestorer/releases?per_page=1")
          
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.skinsrestorer.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} SkinsRestorer" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.skinsrestorer.version = \"$latestVers\" | ${{ env.PLs }}.skinsrestorer.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: AuthMeVelocity
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' \
            -H "Accept-Language: en" -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4.212 Safari/537.36" \
            "https://api.github.com/repos/4drian3d/AuthMeVelocity/releases?per_page=1")
          
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest build: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.authme_velocity.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} AuthMeVelocity" >> $GITHUB_ENV;
            yq -i "${{ env.PLs }}.authme_velocity.version = $latestVers" ${{ env.VERS_FILE }}
          fi

      - name: AuthMeReReloaded
        run: |
          resp=$(curl --silent -X 'GET' "https://api.modrinth.com/v2/project/authmerereloaded/version" -H 'accept: application/json')
          latestID=$(echo "$resp" | jq -r .[0].id)
          full_version=$(echo "$resp" | jq -r .[0].version_number)
          latestVers="${full_version%%-*}"
          echo "ID: $latestID - Full vers: $full_version - Vers: $latestVers"

          currentID=$(yq '${{ env.PLs }}.authme.versionID' ${{ env.VERS_FILE }})
          echo "current ID: $currentID"
          currentVers=$(yq '${{ env.PLs }}.authme.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" -o "$latestID" != "$currentID" ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} AuthMe" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i "${{ env.PLs }}.authme.version = \"$latestVers\" | ${{ env.PLs }}.authme.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestID != $currentID ]; then
            echo "ID update"
            yq -i "${{ env.PLs }}.authme.versionID = \"$latestID\"" ${{ env.VERS_FILE }}
          fi
      
      - name: BungeeGuard
        run: |
          resp=$(curl --silent -X 'GET' "https://api.github.com/repos/lucko/BungeeGuard/releases?per_page=1" -H 'accept: application/json')
          
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          latestVers=${latestVers#v}
          echo "latest build: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.bungeeguard.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} BungeeGuard" >> $GITHUB_ENV;
            yq -i "${{ env.PLs }}.bungeeguard.version = $latestVers" ${{ env.VERS_FILE }}
          fi
      - name: LuckPerms
        run: |
          resp=$(curl --silent -X 'GET' "https://api.modrinth.com/v2/project/luckperms/version?loaders=[\"bukkit\"]" -H 'accept: application/json')
          latestID=$(echo "$resp" | jq -r .[0].id)
          full_version=$(echo "$resp" | jq -r .[0].version_number)
          latestVers="${full_version#v}"
          latestVers="${full_version%%-*}"
          echo "ID: $latestID - Full vers: $full_version - Vers: $latestVers"

          currentID=$(yq '${{ env.PLs }}.luckperms.versionID' ${{ env.VERS_FILE }})
          echo "current ID: $currentID"
          currentVers=$(yq '${{ env.PLs }}.luckperms.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" -o "$latestID" != "$currentID" ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} LuckPerms" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i "${{ env.PLs }}.luckperms.version = \"$latestVers\" | ${{ env.PLs }}.luckperms.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestID != $currentID ]; then
            echo "ID update"
            yq -i "${{ env.PLs }}.luckperms.versionID = \"$latestID\"" ${{ env.VERS_FILE }}
          fi





      - name: "Check what needs to be done"
        run: | 
          echo ${{ env.changed }}
          if [ "${{ env.changed }}" != "" ]; then
            if [ -z "${{ env.BRANCH_NAME }}" ]; then
              echo "No branch matching the pattern found."
              echo "need_pr=true" >> $GITHUB_ENV;
              exit 0
            fi
            echo "Branch ${{ env.BRANCH_NAME }} exists."
            git config --local user.name "github-actions[bot]"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            
            git commit -m "AUTO-update deps:${{ env.changed }}"
            echo "need_pr_update=true" >> $GITHUB_ENV;
          fi

      - name: Push changes to exiting PR branch
        if: ${{ env.need_pr_update }}
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ env.BRANCH_NAME }}
          force: false

      - name: Find and update PR title
        if: ${{ env.need_pr_update }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.HA_GITHUB_TOKEN }}
          script: |
            
            // Fetch the open PR for the branch
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${{ env.BRANCH_NAME }}`,
              state: "open"
            });
            if (pullRequests.length > 0) {
              const pullRequest = pullRequests[0]; // Assuming the first result is the right PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.number,
                title: `${ pullRequest.title }${{ env.changed }}`
              });
            } else {
              console.log("No open PR found for auth-server-deps.");
            }

      - name: Create Pull Request
        if: ${{ env.need_pr }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          commit-message: |
            AUTO-update deps:${{ env.changed }}

            Dependency updates detected.
          branch: auth-server-deps
          delete-branch: true
          branch-suffix: short-commit-hash
          title: "AUTO-Update deps:${{ env.changed }}"
          body: "This pull request was created automatically by a GitHub Action."
          labels: dependencies
          maintainer-can-modify: true
          token: ${{ secrets.HA_GITHUB_TOKEN }}

