name: All-Platform Velocity Proxy deps

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write


jobs:
  check_for_updates:
    runs-on: ubuntu-latest
    name: Check for updates
    strategy:
      matrix:
        file: ["./mc-all-platform-velocity-beta/default_config/plugins.yaml", "./mc-all-platform-velocity/default_config/plugins.yaml"]
      max-parallel: 1
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.HA_GITHUB_TOKEN }}
      - name: Create empty "changed" env variable and check for existimg branch
        run: |
          echo "changed=" >> $GITHUB_ENV;

          REGEX_PATTERN="vel-prox-deps-[a-f0-9]{7}"
          BRANCHES=$(git branch -r)
          echo "Branches: $BRANCHES"
          BRANCH_NAME=$(echo "$BRANCHES" | grep -E "$REGEX_PATTERN" | sed 's|origin/||' | head -n 1 | xargs )
          echo "Found branch: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          if [ "$BRANCH_NAME" != "" ]; then
            echo "fetching and checking out..."
            git fetch --all
            git checkout $BRANCH_NAME
            echo "done"
          fi

          echo "VERS_FILE=${{ matrix.file }}" >> $GITHUB_ENV
          echo "PLs=.packaged_plugins" >> $GITHUB_ENV

      - name: Velocity
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.papermc.io/v2/projects/velocity")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .versions.[-1])
          echo "latest version: $latestVers"
          resp2=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.papermc.io/v2/projects/velocity/versions/$latestVers")
          echo "$resp2"
          latestBuild=$(echo "$resp2" | jq -r .builds.[-1])
          echo "latest build: $latestBuild"
          
          currentVers=$(yq '.velocity.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          currentBuild=$(yq '.velocity.build' ${{ env.VERS_FILE }})
          echo "current build: $currentBuild"

          if [ $latestVers != $currentVers -o $latestBuild != $currentBuild ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} Velocity" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i ".velocity.version = \"$latestVers\" | .velocity.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestBuild != $currentBuild ]; then
            echo "BUILD update"
            yq -i ".velocity.build = $latestBuild" ${{ env.VERS_FILE }}
          fi

      # https://download.geysermc.org/v2/projects/geyser/versions/$GEYSER_VERS/builds/$GEYSER_BUILD/downloads/velocity
      - name: Geyser
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://download.geysermc.org/v2/projects/geyser")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .versions.[-1])
          echo "latest version: $latestVers"
          resp2=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://download.geysermc.org/v2/projects/geyser/versions/$latestVers")
          echo "$resp2"
          latestBuild=$(echo "$resp2" | jq -r .builds.[-1])
          echo "latest build: $latestBuild"
          
          currentVers=$(yq '${{ env.PLs }}.geyser.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          currentBuild=$(yq '${{ env.PLs }}.geyser.build' ${{ env.VERS_FILE }})
          echo "current build: $currentBuild"

          if [ $latestVers != $currentVers -o $latestBuild != $currentBuild ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} Geyser" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i "${{ env.PLs }}.geyser.version = \"$latestVers\" | ${{ env.PLs }}.geyser.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestBuild != $currentBuild ]; then
            echo "BUILD update"
            yq -i "${{ env.PLs }}.geyser.build = $(echo $latestBuild)" ${{ env.VERS_FILE }}
          fi
          
      - name: Floodgate
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://download.geysermc.org/v2/projects/floodgate")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .versions.[-1])
          echo "latest version: $latestVers"
          resp2=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://download.geysermc.org/v2/projects/floodgate/versions/$latestVers")
          echo "$resp2"
          latestBuild=$(echo "$resp2" | jq -r .builds.[-1])
          echo "latest build: $latestBuild"

          currentVers=$(yq '${{ env.PLs }}.floodgate.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          currentBuild=$(yq '${{ env.PLs }}.floodgate.build' ${{ env.VERS_FILE }})
          echo "current build: $currentBuild"

          if [ "$latestVers" != "$currentVers" -o "$latestBuild" != "$currentBuild" ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} Floodgate" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i "${{ env.PLs }}.floodgate.version = \"$latestVers\" | ${{ env.PLs }}.floodgate.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestBuild != $currentBuild ]; then
            echo "BUILD update"
            yq -i "${{ env.PLs }}.floodgate.build = $latestBuild" ${{ env.VERS_FILE }}
          fi
      
      - name: ViaVersion
        run: |
          latestVers=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" "https://hangar.papermc.io/api/v1/projects/ViaVersion/latestrelease")
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.viaversion.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} ViaVersion" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.viaversion.version = \"$latestVers\" | ${{ env.PLs }}.viaversion.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: ViaBackwards
        run: |
          latestVers=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" "https://hangar.papermc.io/api/v1/projects/ViaBackwards/latestrelease")
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.viabackwards.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} ViaBackwards" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.viabackwards.version = \"$latestVers\" | ${{ env.PLs }}.viabackwards.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: ViaRewind
        run: |
          latestVers=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" "https://hangar.papermc.io/api/v1/projects/ViaRewind/latestrelease")
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.viarewind.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} ViaRewind" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.viarewind.version = \"$latestVers\" | ${{ env.PLs }}.viarewind.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: EaglercraftXServer
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.github.com/repos/lax1dude/eaglerxserver/releases?per_page=1")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          latestVers=${latestVers#v}
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.eaglerxserver.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"

          if [ "$latestVers" != "$currentVers" ] && [ "$latestVers" != "" ]; then
            echo "changed=${{ env.changed }} EaglercraftXServer" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.eaglerxserver.version = \"$latestVers\" | ${{ env.PLs }}.eaglerxserver.version style=\"\"" ${{ env.VERS_FILE }}
            yq eval -i "${{ env.PLs }}.eaglerxrewind.version = \"$latestVers\" | ${{ env.PLs }}.eaglerxrewind.version style=\"\"" ${{ env.VERS_FILE }}
            yq eval -i "${{ env.PLs }}.eaglermotd.version = \"$latestVers\" | ${{ env.PLs }}.eaglermotd.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: SkinsRestorer
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.github.com/repos/SkinsRestorer/SkinsRestorer/releases?per_page=1")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.skinsrestorer.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} SkinsRestorer" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.skinsrestorer.version = \"$latestVers\" | ${{ env.PLs }}.skinsrestorer.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: GeyserExtras
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.github.com/repos/GeyserExtras/GeyserExtras/releases?per_page=1")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest version: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.geyser_extras.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} GeyserExtras" >> $GITHUB_ENV;
            yq eval -i "${{ env.PLs }}.geyser_extras.version = \"$latestVers\" | ${{ env.PLs }}.geyser_extras.version style=\"\"" ${{ env.VERS_FILE }}
          fi

      - name: MCXboxBroadcast
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.github.com/repos/MCXboxBroadcast/Broadcaster/releases?per_page=1")
          exho "$resp"
          latestBuild=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest build: $latestBuild"

          currentBuild=$(yq '${{ env.PLs }}.xbox_broadcast.build' ${{ env.VERS_FILE }})
          echo "current version: $currentBuild"
          if [ "$latestBuild" != "$currentBuild" ]; then
            echo "changed=${{ env.changed }} MCXboxBroadcaster" >> $GITHUB_ENV;
            yq -i "${{ env.PLs }}.xbox_broadcast.build = $latestBuild" ${{ env.VERS_FILE }}
          fi

      - name: ThirdPartyCosmetics
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://download.geysermc.org/v2/projects/thirdpartycosmetics")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .versions.[-1])
          echo "latest version: $latestVers"
          resp2=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://download.geysermc.org/v2/projects/thirdpartycosmetics/versions/$latestVers")
          echo "$resp2"
          latestBuild=$(echo "$resp2" | jq -r .builds.[-1])
          echo "latest build: $latestBuild"
          
          currentVers=$(yq '${{ env.PLs }}.third_party_cosmetics.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          currentBuild=$(yq '${{ env.PLs }}.third_party_cosmetics.build' ${{ env.VERS_FILE }})
          echo "current build: $currentBuild"

          if [ $latestVers != $currentVers -o $latestBuild != $currentBuild ]; then
            echo "UPDATE"
            echo "changed=${{ env.changed }} ThirdPartyCosmetics" >> $GITHUB_ENV;
          fi
          if [ $latestVers != $currentVers ]; then
            echo "VERSION update"
            yq eval -i "${{ env.PLs }}.third_party_cosmetics.version = \"$latestVers\" | ${{ env.PLs }}.third_party_cosmetics.version style=\"\"" ${{ env.VERS_FILE }}
          fi
          if [ $latestBuild != $currentBuild ]; then
            echo "BUILD update"
            yq -i "${{ env.PLs }}.third_party_cosmetics.build = $(echo $latestBuild)" ${{ env.VERS_FILE }}
          fi

      - name: AuthMeVelocity
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.github.com/repos/4drian3d/AuthMeVelocity/releases?per_page=1")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest build: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.authme_velocity.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} AuthMeVelocity" >> $GITHUB_ENV;
            yq -i "${{ env.PLs }}.authme_velocity.version = $latestVers" ${{ env.VERS_FILE }}
          fi

      - name: VPacketEvents
        run: |
          resp=$(curl --silent -X 'GET' -H "Accept-Encoding: identity" -H 'accept: application/json' "https://api.github.com/repos/4drian3d/VPacketEvents/releases?per_page=1")
          echo "$resp"
          latestVers=$(echo "$resp" | jq -r .[0].tag_name)
          echo "latest build: $latestVers"

          currentVers=$(yq '${{ env.PLs }}.vpacket_events.version' ${{ env.VERS_FILE }})
          echo "current version: $currentVers"
          if [ "$latestVers" != "$currentVers" ]; then
            echo "changed=${{ env.changed }} VPacketEvents" >> $GITHUB_ENV;
            yq -i "${{ env.PLs }}.vpacket_events.version = $latestVers" ${{ env.VERS_FILE }}
          fi


      - name: "Check what needs to be done"
        run: | 
          echo ${{ env.changed }}
          if [ "${{ env.changed }}" != "" ]; then
            if [ -z "${{ env.BRANCH_NAME }}" ]; then
              echo "No branch matching the pattern found."
              echo "need_pr=true" >> $GITHUB_ENV;
              exit 0
            fi
            echo "Branch ${{ env.BRANCH_NAME }} exists."
            git config --local user.name "github-actions[bot]"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            
            git commit -m "AUTO-update deps:${{ env.changed }}"
            echo "need_pr_update=true" >> $GITHUB_ENV;
          fi

      - name: Push changes to exiting PR branch
        if: ${{ env.need_pr_update }}
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ env.BRANCH_NAME }}
          force: false

      - name: Find and update PR title
        if: ${{ env.need_pr_update }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.HA_GITHUB_TOKEN }}
          script: |
            
            // Fetch the open PR for the branch
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${{ env.BRANCH_NAME }}`,
              state: "open"
            });
            if (pullRequests.length > 0) {
              const pullRequest = pullRequests[0]; // Assuming the first result is the right PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.number,
                title: `${ pullRequest.title }${{ env.changed }}`
              });
            } else {
              console.log("No open PR found for vel-prox-deps.");
            }

      - name: Create Pull Request
        if: ${{ env.need_pr }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          commit-message: |
            AUTO-update deps:${{ env.changed }}

            Dependency updates detected.
          branch: vel-prox-deps
          delete-branch: true
          branch-suffix: short-commit-hash
          title: "AUTO-Update deps:${{ env.changed }}"
          body: "This pull request was created automatically by a GitHub Action."
          labels: dependencies
          maintainer-can-modify: true
          token: ${{ secrets.HA_GITHUB_TOKEN }}

