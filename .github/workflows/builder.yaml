name: Builder

env:
  #BUILD_ARGS: "--test"
  MONITORED_FILES: "build.yaml config.yaml Dockerfile rootfs run.sh start.sh"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: write-all

jobs:
  init_build:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4.2.2

      - name: Get changed files
        id: changed_files
        uses: UplandJacob/retrieve-changed-files@v4.1.1

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                      changed_addons+=("\"${addon}\",");
                    fi
                  fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi
  build:
    needs: init_build
    runs-on: ubuntu-latest
    if: needs.init_build.outputs.changed == 'true'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init_build.outputs.changed_addons) }}
        arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]
      fail-fast: false
    steps:
      # - name: Dump github context
      #   run: echo "$GITHUB_CONTEXT"
      #   shell: bash
      #   env:
      #    GITHUB_CONTEXT: ${{ toJson(github) }}
   
      - name: Check out repository
        uses: actions/checkout@v4.2.2

      - name: Get information (${{ matrix.arch }} ${{ matrix.addon }})
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ ! -f "./${{ matrix.addon }}/Dockerfile" ]]; then
            echo "NO NEED TO BUILD"
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          else
            build_archs=${{ steps.info.outputs.architectures }}
            config_archs=$(yq eval -o=json '.arch' ./${{ matrix.addon }}/config.yaml | jq -c '.')
            echo "From build.yaml: $build_archs"
            echo "From config.yaml: $config_archs"

            if [[ "${build_archs}" =~ ${{ matrix.arch }} ]]; then
              if [[ "${config_archs}" =~ ${{ matrix.arch }} ]]; then
                echo "build_arch=true" >> $GITHUB_OUTPUT;
                echo "image=$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT;
                if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                  echo "BUILD_ARGS=" >> $GITHUB_ENV;
                fi
              else
                echo "${{ matrix.arch }} is not in config.yaml for ${{ matrix.addon }}, skipping build";
                echo "build_arch=false" >> $GITHUB_OUTPUT;
              fi
            else
              echo "${{ matrix.arch }} is not in build.yaml for ${{ matrix.addon }}, skipping build";
              echo "build_arch=false" >> $GITHUB_OUTPUT;
            fi
          fi


      - name: Set BUILD_FROM, PLATFORM, VERSION, etc
        if: steps.check.outputs.build_arch == 'true'
        run: |
          BUILD_FROM=$(yq e ".build_from.${{ matrix.arch }}" ./${{ matrix.addon }}/build.yaml)
          PLATFORM=$(yq e ".platform.${{ matrix.arch }}" ./${{ matrix.addon }}/build.yaml)
          VERSION=$(yq e ".version" ./${{ matrix.addon }}/config.yaml)
          LICENSE=$(head -n1 LICENSE)
          NAME=$(yq e ".name" ./${{ matrix.addon }}/config.yaml)
          DESC=$(yq e ".description" ./${{ matrix.addon }}/config.yaml)
          SLUG=$(yq e ".slug" ./${{ matrix.addon }}/config.yaml)

          echo "BUILD_FROM=${BUILD_FROM}" >> $GITHUB_ENV
          echo "PLATFORM=${PLATFORM}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "BUILD_LICENSE=${LICENSE}" >> $GITHUB_ENV
          echo "BUILD_NAME=${NAME}" >> $GITHUB_ENV
          echo "BUILD_DESCRIPTION=${DESC}" >> $GITHUB_ENV
          echo "BUILD_SLUG=${SLUG}" >> $GITHUB_ENV

          echo "REPO_NAME_LC=$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          
          REPO_NAME_ONLY_LC=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "repo name: $REPO_NAME_ONLY_LC"
          echo "REPO_NAME_ONLY_LC=${REPO_NAME_ONLY_LC}" >> $GITHUB_ENV

          echo "platform may be different than arch. ex armv7 vs arm/v7:"
          echo "arch: ${{ matrix.arch }}    platform: $PLATFORM"

          resp=$(curl --silent \
            -H "Authorization: Bearer ${{ secrets.HA_GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.repository_owner }}/packages/container/${REPO_NAME_ONLY_LC}-${{ matrix.addon }}-${{ matrix.arch }}/versions"
          )
          if [[ $(echo "$resp" | jq -r .message) != *"not found"* ]]; then
            lat_vers=$(echo "$resp" | jq -r .[0].metadata.container.tags[0])
            echo "$lat_vers"
            echo "LATEST_VERSION=$lat_vers" >> $GITHUB_ENV
          else
            echo "no current package found"
            echo "LATEST_VERSION=not_found" >> $GITHUB_ENV
          fi

      - name: Authenticate GitHub Container Registry
        # if: env.BUILD_ARGS != '--test'
        if: env.VERSION != env.LATEST_VERSION
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.HA_GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{ steps.check.outputs.build_arch == 'true' }}
        uses: docker/setup-buildx-action@v3.10.0

      - name: Build and push Docker images
        if: ${{ steps.check.outputs.build_arch == 'true' && env.VERSION != env.LATEST_VERSION }}
        run: |
          echo "PUSHING BUILD"
          docker buildx build --platform linux/${{ env.PLATFORM }} \
            --build-arg BUILD_FROM=${{ env.BUILD_FROM }} \
            --build-arg BUILD_AUTHOR=${{ github.repository_owner }} \
            --build-arg BUILD_REPO_NAME=${{ env.REPO_NAME_ONLY_LC }} \
            --build-arg BUILD_SLUG=${{ env.BUILD_SLUG }} \
            --build-arg BUILD_NAME="${{ env.BUILD_NAME }}" \
            --build-arg BUILD_DESCRIPTION="${{ env.BUILD_DESCRIPTION }}" \
            --build-arg BUILD_LICENSE="${{ env.BUILD_LICENSE }}" \
            --build-arg BUILD_VERSION=${{ env.VERSION }} \
            --build-arg BUILD_ARCH=${{ matrix.arch }} \
            --push \
            -t ghcr.io/${{ env.REPO_NAME_LC }}-${{ matrix.addon }}-${{ matrix.arch }}:${{ env.VERSION }} \
            ./${{ matrix.addon }}

      - name: Build Docker images
        if: ${{ steps.check.outputs.build_arch == 'true' && env.VERSION == env.LATEST_VERSION }}
        run: |
          echo "NOT PUSHING BUILD"
          docker buildx build --platform linux/${{ env.PLATFORM }} \
            --build-arg BUILD_FROM=${{ env.BUILD_FROM }} \
            --build-arg BUILD_AUTHOR=${{ github.repository_owner }} \
            --build-arg BUILD_REPO_NAME=${{ env.REPO_NAME_ONLY_LC }} \
            --build-arg BUILD_SLUG=${{ env.BUILD_SLUG }} \
            --build-arg BUILD_NAME="${{ env.BUILD_NAME }}" \
            --build-arg BUILD_DESCRIPTION="${{ env.BUILD_DESCRIPTION }}" \
            --build-arg BUILD_LICENSE="${{ env.BUILD_LICENSE }}" \
            --build-arg BUILD_VERSION=${{ env.VERSION }} \
            --build-arg BUILD_ARCH=${{ matrix.arch }} \
            -t ghcr.io/${{ env.REPO_NAME_LC }}-${{ matrix.addon }}-${{ matrix.arch }}:${{ env.VERSION }} \
            ./${{ matrix.addon }}

  check_build:
    name: Check build success
    if: always()
    needs:
    - build
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        allowed-skips: build
        jobs: ${{ toJSON(needs) }}

